# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RNA', [dirname(__file__)])
        except ImportError:
            import _RNA
            return _RNA
        if fp is not None:
            try:
                _mod = imp.load_module('_RNA', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _RNA = swig_import_helper()
    del swig_import_helper
else:
    import _RNA
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def new_intP(nelements):
    return _RNA.new_intP(nelements)
new_intP = _RNA.new_intP

def delete_intP(ary):
    return _RNA.delete_intP(ary)
delete_intP = _RNA.delete_intP

def intP_getitem(ary, index):
    return _RNA.intP_getitem(ary, index)
intP_getitem = _RNA.intP_getitem

def intP_setitem(ary, index, value):
    return _RNA.intP_setitem(ary, index, value)
intP_setitem = _RNA.intP_setitem
class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _RNA.new_intArray(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _RNA.delete_intArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _RNA.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _RNA.intArray___setitem__(self, index, value)

    def cast(self):
        return _RNA.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _RNA.intArray_frompointer
    if _newclass:
        frompointer = staticmethod(_RNA.intArray_frompointer)
intArray_swigregister = _RNA.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _RNA.intArray_frompointer(t)
intArray_frompointer = _RNA.intArray_frompointer


def new_floatP(nelements):
    return _RNA.new_floatP(nelements)
new_floatP = _RNA.new_floatP

def delete_floatP(ary):
    return _RNA.delete_floatP(ary)
delete_floatP = _RNA.delete_floatP

def floatP_getitem(ary, index):
    return _RNA.floatP_getitem(ary, index)
floatP_getitem = _RNA.floatP_getitem

def floatP_setitem(ary, index, value):
    return _RNA.floatP_setitem(ary, index, value)
floatP_setitem = _RNA.floatP_setitem
class floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _RNA.new_floatArray(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _RNA.delete_floatArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _RNA.floatArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _RNA.floatArray___setitem__(self, index, value)

    def cast(self):
        return _RNA.floatArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _RNA.floatArray_frompointer
    if _newclass:
        frompointer = staticmethod(_RNA.floatArray_frompointer)
floatArray_swigregister = _RNA.floatArray_swigregister
floatArray_swigregister(floatArray)

def floatArray_frompointer(t):
    return _RNA.floatArray_frompointer(t)
floatArray_frompointer = _RNA.floatArray_frompointer


def new_doubleP(nelements):
    return _RNA.new_doubleP(nelements)
new_doubleP = _RNA.new_doubleP

def delete_doubleP(ary):
    return _RNA.delete_doubleP(ary)
delete_doubleP = _RNA.delete_doubleP

def doubleP_getitem(ary, index):
    return _RNA.doubleP_getitem(ary, index)
doubleP_getitem = _RNA.doubleP_getitem

def doubleP_setitem(ary, index, value):
    return _RNA.doubleP_setitem(ary, index, value)
doubleP_setitem = _RNA.doubleP_setitem
class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _RNA.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _RNA.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _RNA.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _RNA.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _RNA.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _RNA.doubleArray_frompointer
    if _newclass:
        frompointer = staticmethod(_RNA.doubleArray_frompointer)
doubleArray_swigregister = _RNA.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _RNA.doubleArray_frompointer(t)
doubleArray_frompointer = _RNA.doubleArray_frompointer


def new_ushortP(nelements):
    return _RNA.new_ushortP(nelements)
new_ushortP = _RNA.new_ushortP

def delete_ushortP(ary):
    return _RNA.delete_ushortP(ary)
delete_ushortP = _RNA.delete_ushortP

def ushortP_getitem(ary, index):
    return _RNA.ushortP_getitem(ary, index)
ushortP_getitem = _RNA.ushortP_getitem

def ushortP_setitem(ary, index, value):
    return _RNA.ushortP_setitem(ary, index, value)
ushortP_setitem = _RNA.ushortP_setitem

def new_shortP(nelements):
    return _RNA.new_shortP(nelements)
new_shortP = _RNA.new_shortP

def delete_shortP(ary):
    return _RNA.delete_shortP(ary)
delete_shortP = _RNA.delete_shortP

def shortP_getitem(ary, index):
    return _RNA.shortP_getitem(ary, index)
shortP_getitem = _RNA.shortP_getitem

def shortP_setitem(ary, index, value):
    return _RNA.shortP_setitem(ary, index, value)
shortP_setitem = _RNA.shortP_setitem

def cdata(ptr, nelements=1):
    return _RNA.cdata(ptr, nelements)
cdata = _RNA.cdata

def memmove(data, indata):
    return _RNA.memmove(data, indata)
memmove = _RNA.memmove

_RNA.VERSION_swigconstant(_RNA)
VERSION = _RNA.VERSION
class param(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, param, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, param, name)
    __repr__ = _swig_repr
    __swig_setmethods__["model_details"] = _RNA.param_model_details_set
    __swig_getmethods__["model_details"] = _RNA.param_model_details_get
    if _newclass:
        model_details = _swig_property(_RNA.param_model_details_get, _RNA.param_model_details_set)

    def __init__(self, *args):
        this = _RNA.new_param(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def get_temperature(self):
        return _RNA.param_get_temperature(self)
    __swig_destroy__ = _RNA.delete_param
    __del__ = lambda self: None
param_swigregister = _RNA.param_swigregister
param_swigregister(param)

class exp_param(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, exp_param, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, exp_param, name)
    __repr__ = _swig_repr
    __swig_setmethods__["kT"] = _RNA.exp_param_kT_set
    __swig_getmethods__["kT"] = _RNA.exp_param_kT_get
    if _newclass:
        kT = _swig_property(_RNA.exp_param_kT_get, _RNA.exp_param_kT_set)
    __swig_setmethods__["model_details"] = _RNA.exp_param_model_details_set
    __swig_getmethods__["model_details"] = _RNA.exp_param_model_details_get
    if _newclass:
        model_details = _swig_property(_RNA.exp_param_model_details_get, _RNA.exp_param_model_details_set)

    def __init__(self, *args):
        this = _RNA.new_exp_param(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def get_temperature(self):
        return _RNA.exp_param_get_temperature(self)
    __swig_destroy__ = _RNA.delete_exp_param
    __del__ = lambda self: None
exp_param_swigregister = _RNA.exp_param_swigregister
exp_param_swigregister(exp_param)


_RNA.VRNA_GQUAD_MAX_STACK_SIZE_swigconstant(_RNA)
VRNA_GQUAD_MAX_STACK_SIZE = _RNA.VRNA_GQUAD_MAX_STACK_SIZE

_RNA.VRNA_GQUAD_MIN_STACK_SIZE_swigconstant(_RNA)
VRNA_GQUAD_MIN_STACK_SIZE = _RNA.VRNA_GQUAD_MIN_STACK_SIZE

_RNA.VRNA_GQUAD_MAX_LINKER_LENGTH_swigconstant(_RNA)
VRNA_GQUAD_MAX_LINKER_LENGTH = _RNA.VRNA_GQUAD_MAX_LINKER_LENGTH

_RNA.VRNA_GQUAD_MIN_LINKER_LENGTH_swigconstant(_RNA)
VRNA_GQUAD_MIN_LINKER_LENGTH = _RNA.VRNA_GQUAD_MIN_LINKER_LENGTH

_RNA.VRNA_GQUAD_MIN_BOX_SIZE_swigconstant(_RNA)
VRNA_GQUAD_MIN_BOX_SIZE = _RNA.VRNA_GQUAD_MIN_BOX_SIZE

_RNA.VRNA_GQUAD_MAX_BOX_SIZE_swigconstant(_RNA)
VRNA_GQUAD_MAX_BOX_SIZE = _RNA.VRNA_GQUAD_MAX_BOX_SIZE

_RNA.UNKNOWN_swigconstant(_RNA)
UNKNOWN = _RNA.UNKNOWN

_RNA.QUIT_swigconstant(_RNA)
QUIT = _RNA.QUIT

_RNA.S_swigconstant(_RNA)
S = _RNA.S

_RNA.S_H_swigconstant(_RNA)
S_H = _RNA.S_H

_RNA.HP_swigconstant(_RNA)
HP = _RNA.HP

_RNA.HP_H_swigconstant(_RNA)
HP_H = _RNA.HP_H

_RNA.B_swigconstant(_RNA)
B = _RNA.B

_RNA.B_H_swigconstant(_RNA)
B_H = _RNA.B_H

_RNA.IL_swigconstant(_RNA)
IL = _RNA.IL

_RNA.IL_H_swigconstant(_RNA)
IL_H = _RNA.IL_H

_RNA.MMH_swigconstant(_RNA)
MMH = _RNA.MMH

_RNA.MMH_H_swigconstant(_RNA)
MMH_H = _RNA.MMH_H

_RNA.MMI_swigconstant(_RNA)
MMI = _RNA.MMI

_RNA.MMI_H_swigconstant(_RNA)
MMI_H = _RNA.MMI_H

_RNA.MMI1N_swigconstant(_RNA)
MMI1N = _RNA.MMI1N

_RNA.MMI1N_H_swigconstant(_RNA)
MMI1N_H = _RNA.MMI1N_H

_RNA.MMI23_swigconstant(_RNA)
MMI23 = _RNA.MMI23

_RNA.MMI23_H_swigconstant(_RNA)
MMI23_H = _RNA.MMI23_H

_RNA.MMM_swigconstant(_RNA)
MMM = _RNA.MMM

_RNA.MMM_H_swigconstant(_RNA)
MMM_H = _RNA.MMM_H

_RNA.MME_swigconstant(_RNA)
MME = _RNA.MME

_RNA.MME_H_swigconstant(_RNA)
MME_H = _RNA.MME_H

_RNA.D5_swigconstant(_RNA)
D5 = _RNA.D5

_RNA.D5_H_swigconstant(_RNA)
D5_H = _RNA.D5_H

_RNA.D3_swigconstant(_RNA)
D3 = _RNA.D3

_RNA.D3_H_swigconstant(_RNA)
D3_H = _RNA.D3_H

_RNA.INT11_swigconstant(_RNA)
INT11 = _RNA.INT11

_RNA.INT11_H_swigconstant(_RNA)
INT11_H = _RNA.INT11_H

_RNA.INT21_swigconstant(_RNA)
INT21 = _RNA.INT21

_RNA.INT21_H_swigconstant(_RNA)
INT21_H = _RNA.INT21_H

_RNA.INT22_swigconstant(_RNA)
INT22 = _RNA.INT22

_RNA.INT22_H_swigconstant(_RNA)
INT22_H = _RNA.INT22_H

_RNA.ML_swigconstant(_RNA)
ML = _RNA.ML

_RNA.TL_swigconstant(_RNA)
TL = _RNA.TL

_RNA.TRI_swigconstant(_RNA)
TRI = _RNA.TRI

_RNA.HEX_swigconstant(_RNA)
HEX = _RNA.HEX

_RNA.NIN_swigconstant(_RNA)
NIN = _RNA.NIN

_RNA.MISC_swigconstant(_RNA)
MISC = _RNA.MISC

def read_parameter_file(fname):
    return _RNA.read_parameter_file(fname)
read_parameter_file = _RNA.read_parameter_file

def write_parameter_file(fname):
    return _RNA.write_parameter_file(fname)
write_parameter_file = _RNA.write_parameter_file

def gettype(ident):
    return _RNA.gettype(ident)
gettype = _RNA.gettype

def settype(s):
    return _RNA.settype(s)
settype = _RNA.settype

_RNA.GASCONST_swigconstant(_RNA)
GASCONST = _RNA.GASCONST

_RNA.K0_swigconstant(_RNA)
K0 = _RNA.K0

_RNA.INF_swigconstant(_RNA)
INF = _RNA.INF

_RNA.EMAX_swigconstant(_RNA)
EMAX = _RNA.EMAX

_RNA.FORBIDDEN_swigconstant(_RNA)
FORBIDDEN = _RNA.FORBIDDEN

_RNA.BONUS_swigconstant(_RNA)
BONUS = _RNA.BONUS

_RNA.NBPAIRS_swigconstant(_RNA)
NBPAIRS = _RNA.NBPAIRS

_RNA.TURN_swigconstant(_RNA)
TURN = _RNA.TURN

_RNA.MAXLOOP_swigconstant(_RNA)
MAXLOOP = _RNA.MAXLOOP

_RNA.UNIT_swigconstant(_RNA)
UNIT = _RNA.UNIT

_RNA.MINPSCORE_swigconstant(_RNA)
MINPSCORE = _RNA.MINPSCORE

_RNA.VRNA_GQUAD_MISMATCH_PENALTY_swigconstant(_RNA)
VRNA_GQUAD_MISMATCH_PENALTY = _RNA.VRNA_GQUAD_MISMATCH_PENALTY

_RNA.VRNA_GQUAD_MISMATCH_NUM_ALI_swigconstant(_RNA)
VRNA_GQUAD_MISMATCH_NUM_ALI = _RNA.VRNA_GQUAD_MISMATCH_NUM_ALI
class md(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, md, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, md, name)
    __repr__ = _swig_repr
    __swig_setmethods__["temperature"] = _RNA.md_temperature_set
    __swig_getmethods__["temperature"] = _RNA.md_temperature_get
    if _newclass:
        temperature = _swig_property(_RNA.md_temperature_get, _RNA.md_temperature_set)
    __swig_setmethods__["dangles"] = _RNA.md_dangles_set
    __swig_getmethods__["dangles"] = _RNA.md_dangles_get
    if _newclass:
        dangles = _swig_property(_RNA.md_dangles_get, _RNA.md_dangles_set)
    __swig_setmethods__["noLP"] = _RNA.md_noLP_set
    __swig_getmethods__["noLP"] = _RNA.md_noLP_get
    if _newclass:
        noLP = _swig_property(_RNA.md_noLP_get, _RNA.md_noLP_set)
    __swig_setmethods__["noGU"] = _RNA.md_noGU_set
    __swig_getmethods__["noGU"] = _RNA.md_noGU_get
    if _newclass:
        noGU = _swig_property(_RNA.md_noGU_get, _RNA.md_noGU_set)
    __swig_setmethods__["noGUclosure"] = _RNA.md_noGUclosure_set
    __swig_getmethods__["noGUclosure"] = _RNA.md_noGUclosure_get
    if _newclass:
        noGUclosure = _swig_property(_RNA.md_noGUclosure_get, _RNA.md_noGUclosure_set)
    __swig_setmethods__["special_hp"] = _RNA.md_special_hp_set
    __swig_getmethods__["special_hp"] = _RNA.md_special_hp_get
    if _newclass:
        special_hp = _swig_property(_RNA.md_special_hp_get, _RNA.md_special_hp_set)
    __swig_setmethods__["max_bp_span"] = _RNA.md_max_bp_span_set
    __swig_getmethods__["max_bp_span"] = _RNA.md_max_bp_span_get
    if _newclass:
        max_bp_span = _swig_property(_RNA.md_max_bp_span_get, _RNA.md_max_bp_span_set)

    def __init__(self, *args):
        this = _RNA.new_md(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def reset(self):
        return _RNA.md_reset(self)

    def set_from_globals(self):
        return _RNA.md_set_from_globals(self)

    def option_string(self):
        return _RNA.md_option_string(self)
    __swig_destroy__ = _RNA.delete_md
    __del__ = lambda self: None
md_swigregister = _RNA.md_swigregister
md_swigregister(md)


_RNA.NBASES_swigconstant(_RNA)
NBASES = _RNA.NBASES

_RNA.VRNA_MODEL_DEFAULT_TEMPERATURE_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_TEMPERATURE = _RNA.VRNA_MODEL_DEFAULT_TEMPERATURE

_RNA.VRNA_MODEL_DEFAULT_PF_SCALE_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_PF_SCALE = _RNA.VRNA_MODEL_DEFAULT_PF_SCALE

_RNA.VRNA_MODEL_DEFAULT_BETA_SCALE_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_BETA_SCALE = _RNA.VRNA_MODEL_DEFAULT_BETA_SCALE

_RNA.VRNA_MODEL_DEFAULT_DANGLES_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_DANGLES = _RNA.VRNA_MODEL_DEFAULT_DANGLES

_RNA.VRNA_MODEL_DEFAULT_SPECIAL_HP_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_SPECIAL_HP = _RNA.VRNA_MODEL_DEFAULT_SPECIAL_HP

_RNA.VRNA_MODEL_DEFAULT_NO_LP_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_NO_LP = _RNA.VRNA_MODEL_DEFAULT_NO_LP

_RNA.VRNA_MODEL_DEFAULT_NO_GU_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_NO_GU = _RNA.VRNA_MODEL_DEFAULT_NO_GU

_RNA.VRNA_MODEL_DEFAULT_NO_GU_CLOSURE_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_NO_GU_CLOSURE = _RNA.VRNA_MODEL_DEFAULT_NO_GU_CLOSURE

_RNA.VRNA_MODEL_DEFAULT_CIRC_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_CIRC = _RNA.VRNA_MODEL_DEFAULT_CIRC

_RNA.VRNA_MODEL_DEFAULT_GQUAD_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_GQUAD = _RNA.VRNA_MODEL_DEFAULT_GQUAD

_RNA.VRNA_MODEL_DEFAULT_CANONICAL_BP_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_CANONICAL_BP = _RNA.VRNA_MODEL_DEFAULT_CANONICAL_BP

_RNA.VRNA_MODEL_DEFAULT_UNIQ_ML_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_UNIQ_ML = _RNA.VRNA_MODEL_DEFAULT_UNIQ_ML

_RNA.VRNA_MODEL_DEFAULT_ENERGY_SET_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_ENERGY_SET = _RNA.VRNA_MODEL_DEFAULT_ENERGY_SET

_RNA.VRNA_MODEL_DEFAULT_BACKTRACK_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_BACKTRACK = _RNA.VRNA_MODEL_DEFAULT_BACKTRACK

_RNA.VRNA_MODEL_DEFAULT_BACKTRACK_TYPE_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_BACKTRACK_TYPE = _RNA.VRNA_MODEL_DEFAULT_BACKTRACK_TYPE

_RNA.VRNA_MODEL_DEFAULT_COMPUTE_BPP_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_COMPUTE_BPP = _RNA.VRNA_MODEL_DEFAULT_COMPUTE_BPP

_RNA.VRNA_MODEL_DEFAULT_MAX_BP_SPAN_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_MAX_BP_SPAN = _RNA.VRNA_MODEL_DEFAULT_MAX_BP_SPAN

_RNA.VRNA_MODEL_DEFAULT_WINDOW_SIZE_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_WINDOW_SIZE = _RNA.VRNA_MODEL_DEFAULT_WINDOW_SIZE

_RNA.VRNA_MODEL_DEFAULT_LOG_ML_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_LOG_ML = _RNA.VRNA_MODEL_DEFAULT_LOG_ML

_RNA.VRNA_MODEL_DEFAULT_ALI_OLD_EN_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_ALI_OLD_EN = _RNA.VRNA_MODEL_DEFAULT_ALI_OLD_EN

_RNA.VRNA_MODEL_DEFAULT_ALI_RIBO_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_ALI_RIBO = _RNA.VRNA_MODEL_DEFAULT_ALI_RIBO

_RNA.VRNA_MODEL_DEFAULT_ALI_CV_FACT_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_ALI_CV_FACT = _RNA.VRNA_MODEL_DEFAULT_ALI_CV_FACT

_RNA.VRNA_MODEL_DEFAULT_ALI_NC_FACT_swigconstant(_RNA)
VRNA_MODEL_DEFAULT_ALI_NC_FACT = _RNA.VRNA_MODEL_DEFAULT_ALI_NC_FACT

_RNA.MAXALPHA_swigconstant(_RNA)
MAXALPHA = _RNA.MAXALPHA
class fold_compound(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fold_compound, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fold_compound, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _RNA.new_fold_compound(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _RNA.delete_fold_compound
    __del__ = lambda self: None

    def type(self):
        return _RNA.fold_compound_type(self)

    def mfe(self):
        return _RNA.fold_compound_mfe(self)

    def sc_remove(self):
        return _RNA.fold_compound_sc_remove(self)

    def sc_add_up(self, *args):
        return _RNA.fold_compound_sc_add_up(self, *args)

    def sc_add_bp(self, *args):
        return _RNA.fold_compound_sc_add_bp(self, *args)

    def sc_add_hi_motif(self, *args):
        return _RNA.fold_compound_sc_add_hi_motif(self, *args)
fold_compound_swigregister = _RNA.fold_compound_swigregister
fold_compound_swigregister(fold_compound)
cvar = _RNA.cvar

class duplexT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, duplexT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, duplexT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["i"] = _RNA.duplexT_i_set
    __swig_getmethods__["i"] = _RNA.duplexT_i_get
    if _newclass:
        i = _swig_property(_RNA.duplexT_i_get, _RNA.duplexT_i_set)
    __swig_setmethods__["j"] = _RNA.duplexT_j_set
    __swig_getmethods__["j"] = _RNA.duplexT_j_get
    if _newclass:
        j = _swig_property(_RNA.duplexT_j_get, _RNA.duplexT_j_set)
    __swig_setmethods__["end"] = _RNA.duplexT_end_set
    __swig_getmethods__["end"] = _RNA.duplexT_end_get
    if _newclass:
        end = _swig_property(_RNA.duplexT_end_get, _RNA.duplexT_end_set)
    __swig_setmethods__["structure"] = _RNA.duplexT_structure_set
    __swig_getmethods__["structure"] = _RNA.duplexT_structure_get
    if _newclass:
        structure = _swig_property(_RNA.duplexT_structure_get, _RNA.duplexT_structure_set)
    __swig_setmethods__["energy"] = _RNA.duplexT_energy_set
    __swig_getmethods__["energy"] = _RNA.duplexT_energy_get
    if _newclass:
        energy = _swig_property(_RNA.duplexT_energy_get, _RNA.duplexT_energy_set)
    __swig_setmethods__["energy_backtrack"] = _RNA.duplexT_energy_backtrack_set
    __swig_getmethods__["energy_backtrack"] = _RNA.duplexT_energy_backtrack_get
    if _newclass:
        energy_backtrack = _swig_property(_RNA.duplexT_energy_backtrack_get, _RNA.duplexT_energy_backtrack_set)
    __swig_setmethods__["opening_backtrack_x"] = _RNA.duplexT_opening_backtrack_x_set
    __swig_getmethods__["opening_backtrack_x"] = _RNA.duplexT_opening_backtrack_x_get
    if _newclass:
        opening_backtrack_x = _swig_property(_RNA.duplexT_opening_backtrack_x_get, _RNA.duplexT_opening_backtrack_x_set)
    __swig_setmethods__["opening_backtrack_y"] = _RNA.duplexT_opening_backtrack_y_set
    __swig_getmethods__["opening_backtrack_y"] = _RNA.duplexT_opening_backtrack_y_get
    if _newclass:
        opening_backtrack_y = _swig_property(_RNA.duplexT_opening_backtrack_y_get, _RNA.duplexT_opening_backtrack_y_set)
    __swig_setmethods__["offset"] = _RNA.duplexT_offset_set
    __swig_getmethods__["offset"] = _RNA.duplexT_offset_get
    if _newclass:
        offset = _swig_property(_RNA.duplexT_offset_get, _RNA.duplexT_offset_set)
    __swig_setmethods__["dG1"] = _RNA.duplexT_dG1_set
    __swig_getmethods__["dG1"] = _RNA.duplexT_dG1_get
    if _newclass:
        dG1 = _swig_property(_RNA.duplexT_dG1_get, _RNA.duplexT_dG1_set)
    __swig_setmethods__["dG2"] = _RNA.duplexT_dG2_set
    __swig_getmethods__["dG2"] = _RNA.duplexT_dG2_get
    if _newclass:
        dG2 = _swig_property(_RNA.duplexT_dG2_get, _RNA.duplexT_dG2_set)
    __swig_setmethods__["ddG"] = _RNA.duplexT_ddG_set
    __swig_getmethods__["ddG"] = _RNA.duplexT_ddG_get
    if _newclass:
        ddG = _swig_property(_RNA.duplexT_ddG_get, _RNA.duplexT_ddG_set)
    __swig_setmethods__["tb"] = _RNA.duplexT_tb_set
    __swig_getmethods__["tb"] = _RNA.duplexT_tb_get
    if _newclass:
        tb = _swig_property(_RNA.duplexT_tb_get, _RNA.duplexT_tb_set)
    __swig_setmethods__["te"] = _RNA.duplexT_te_set
    __swig_getmethods__["te"] = _RNA.duplexT_te_get
    if _newclass:
        te = _swig_property(_RNA.duplexT_te_get, _RNA.duplexT_te_set)
    __swig_setmethods__["qb"] = _RNA.duplexT_qb_set
    __swig_getmethods__["qb"] = _RNA.duplexT_qb_get
    if _newclass:
        qb = _swig_property(_RNA.duplexT_qb_get, _RNA.duplexT_qb_set)
    __swig_setmethods__["qe"] = _RNA.duplexT_qe_set
    __swig_getmethods__["qe"] = _RNA.duplexT_qe_get
    if _newclass:
        qe = _swig_property(_RNA.duplexT_qe_get, _RNA.duplexT_qe_set)

    def __init__(self):
        this = _RNA.new_duplexT()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _RNA.delete_duplexT
    __del__ = lambda self: None
duplexT_swigregister = _RNA.duplexT_swigregister
duplexT_swigregister(duplexT)

class folden(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, folden, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, folden, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["k"] = _RNA.folden_k_set
    __swig_getmethods__["k"] = _RNA.folden_k_get
    if _newclass:
        k = _swig_property(_RNA.folden_k_get, _RNA.folden_k_set)
    __swig_setmethods__["energy"] = _RNA.folden_energy_set
    __swig_getmethods__["energy"] = _RNA.folden_energy_get
    if _newclass:
        energy = _swig_property(_RNA.folden_energy_get, _RNA.folden_energy_set)
    __swig_setmethods__["next"] = _RNA.folden_next_set
    __swig_getmethods__["next"] = _RNA.folden_next_get
    if _newclass:
        next = _swig_property(_RNA.folden_next_get, _RNA.folden_next_set)
    __swig_destroy__ = _RNA.delete_folden
    __del__ = lambda self: None
folden_swigregister = _RNA.folden_swigregister
folden_swigregister(folden)


_RNA.VRNA_VC_TYPE_SINGLE_swigconstant(_RNA)
VRNA_VC_TYPE_SINGLE = _RNA.VRNA_VC_TYPE_SINGLE

_RNA.VRNA_VC_TYPE_ALIGNMENT_swigconstant(_RNA)
VRNA_VC_TYPE_ALIGNMENT = _RNA.VRNA_VC_TYPE_ALIGNMENT

_RNA.VRNA_OPTION_MFE_swigconstant(_RNA)
VRNA_OPTION_MFE = _RNA.VRNA_OPTION_MFE

_RNA.VRNA_OPTION_PF_swigconstant(_RNA)
VRNA_OPTION_PF = _RNA.VRNA_OPTION_PF

_RNA.VRNA_OPTION_HYBRID_swigconstant(_RNA)
VRNA_OPTION_HYBRID = _RNA.VRNA_OPTION_HYBRID

_RNA.VRNA_OPTION_EVAL_ONLY_swigconstant(_RNA)
VRNA_OPTION_EVAL_ONLY = _RNA.VRNA_OPTION_EVAL_ONLY

_RNA.VRNA_OPTION_WINDOW_swigconstant(_RNA)
VRNA_OPTION_WINDOW = _RNA.VRNA_OPTION_WINDOW

_RNA.VRNA_INPUT_ERROR_swigconstant(_RNA)
VRNA_INPUT_ERROR = _RNA.VRNA_INPUT_ERROR

_RNA.VRNA_INPUT_QUIT_swigconstant(_RNA)
VRNA_INPUT_QUIT = _RNA.VRNA_INPUT_QUIT

_RNA.VRNA_INPUT_MISC_swigconstant(_RNA)
VRNA_INPUT_MISC = _RNA.VRNA_INPUT_MISC

_RNA.VRNA_INPUT_FASTA_HEADER_swigconstant(_RNA)
VRNA_INPUT_FASTA_HEADER = _RNA.VRNA_INPUT_FASTA_HEADER

_RNA.VRNA_INPUT_SEQUENCE_swigconstant(_RNA)
VRNA_INPUT_SEQUENCE = _RNA.VRNA_INPUT_SEQUENCE

_RNA.VRNA_INPUT_CONSTRAINT_swigconstant(_RNA)
VRNA_INPUT_CONSTRAINT = _RNA.VRNA_INPUT_CONSTRAINT

_RNA.VRNA_INPUT_NO_TRUNCATION_swigconstant(_RNA)
VRNA_INPUT_NO_TRUNCATION = _RNA.VRNA_INPUT_NO_TRUNCATION

_RNA.VRNA_INPUT_NO_REST_swigconstant(_RNA)
VRNA_INPUT_NO_REST = _RNA.VRNA_INPUT_NO_REST

_RNA.VRNA_INPUT_NO_SPAN_swigconstant(_RNA)
VRNA_INPUT_NO_SPAN = _RNA.VRNA_INPUT_NO_SPAN

_RNA.VRNA_INPUT_NOSKIP_BLANK_LINES_swigconstant(_RNA)
VRNA_INPUT_NOSKIP_BLANK_LINES = _RNA.VRNA_INPUT_NOSKIP_BLANK_LINES

_RNA.VRNA_INPUT_BLANK_LINE_swigconstant(_RNA)
VRNA_INPUT_BLANK_LINE = _RNA.VRNA_INPUT_BLANK_LINE

_RNA.VRNA_INPUT_NOSKIP_COMMENTS_swigconstant(_RNA)
VRNA_INPUT_NOSKIP_COMMENTS = _RNA.VRNA_INPUT_NOSKIP_COMMENTS

_RNA.VRNA_INPUT_COMMENT_swigconstant(_RNA)
VRNA_INPUT_COMMENT = _RNA.VRNA_INPUT_COMMENT

_RNA.VRNA_OPTION_MULTILINE_swigconstant(_RNA)
VRNA_OPTION_MULTILINE = _RNA.VRNA_OPTION_MULTILINE

def hamming(s1, s2):
    return _RNA.hamming(s1, s2)
hamming = _RNA.hamming

def hamming_bound(s1, s2, n):
    return _RNA.hamming_bound(s1, s2, n)
hamming_bound = _RNA.hamming_bound

def encode_seq(sequence):
    return _RNA.encode_seq(sequence)
encode_seq = _RNA.encode_seq

_RNA.FILENAME_MAX_LENGTH_swigconstant(_RNA)
FILENAME_MAX_LENGTH = _RNA.FILENAME_MAX_LENGTH

_RNA.FILENAME_ID_LENGTH_swigconstant(_RNA)
FILENAME_ID_LENGTH = _RNA.FILENAME_ID_LENGTH

def random_string(l, symbols):
    return _RNA.random_string(l, symbols)
random_string = _RNA.random_string

def hamming_distance(s1, s2):
    return _RNA.hamming_distance(s1, s2)
hamming_distance = _RNA.hamming_distance

def hamming_distance_bound(s1, s2, n):
    return _RNA.hamming_distance_bound(s1, s2, n)
hamming_distance_bound = _RNA.hamming_distance_bound

def pack_structure(s):
    return _RNA.pack_structure(s)
pack_structure = _RNA.pack_structure

def unpack_structure(packed):
    return _RNA.unpack_structure(packed)
unpack_structure = _RNA.unpack_structure

def make_loop_index(structure):
    return _RNA.make_loop_index(structure)
make_loop_index = _RNA.make_loop_index

def bp_distance(str1, str2):
    return _RNA.bp_distance(str1, str2)
bp_distance = _RNA.bp_distance

def db_pack(struc):
    return _RNA.db_pack(struc)
db_pack = _RNA.db_pack

def db_unpack(packed):
    return _RNA.db_unpack(packed)
db_unpack = _RNA.db_unpack

def consensus(AS):
    return _RNA.consensus(AS)
consensus = _RNA.consensus

def consens_mis(AS):
    return _RNA.consens_mis(AS)
consens_mis = _RNA.consens_mis

def get_xy_coordinates(structure):
    return _RNA.get_xy_coordinates(structure)
get_xy_coordinates = _RNA.get_xy_coordinates

_RNA.PI_swigconstant(_RNA)
PI = _RNA.PI

_RNA.PIHALF_swigconstant(_RNA)
PIHALF = _RNA.PIHALF

_RNA.VRNA_PLOT_TYPE_SIMPLE_swigconstant(_RNA)
VRNA_PLOT_TYPE_SIMPLE = _RNA.VRNA_PLOT_TYPE_SIMPLE

_RNA.VRNA_PLOT_TYPE_NAVIEW_swigconstant(_RNA)
VRNA_PLOT_TYPE_NAVIEW = _RNA.VRNA_PLOT_TYPE_NAVIEW

_RNA.VRNA_PLOT_TYPE_CIRCULAR_swigconstant(_RNA)
VRNA_PLOT_TYPE_CIRCULAR = _RNA.VRNA_PLOT_TYPE_CIRCULAR
class COORDINATE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COORDINATE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COORDINATE, name)
    __repr__ = _swig_repr

    def get(self, i):
        return _RNA.COORDINATE_get(self, i)
    __swig_setmethods__["X"] = _RNA.COORDINATE_X_set
    __swig_getmethods__["X"] = _RNA.COORDINATE_X_get
    if _newclass:
        X = _swig_property(_RNA.COORDINATE_X_get, _RNA.COORDINATE_X_set)
    __swig_setmethods__["Y"] = _RNA.COORDINATE_Y_set
    __swig_getmethods__["Y"] = _RNA.COORDINATE_Y_get
    if _newclass:
        Y = _swig_property(_RNA.COORDINATE_Y_get, _RNA.COORDINATE_Y_set)

    def __init__(self):
        this = _RNA.new_COORDINATE()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _RNA.delete_COORDINATE
    __del__ = lambda self: None
COORDINATE_swigregister = _RNA.COORDINATE_swigregister
COORDINATE_swigregister(COORDINATE)


def simple_xy_coordinates(pair_table, X, Y):
    return _RNA.simple_xy_coordinates(pair_table, X, Y)
simple_xy_coordinates = _RNA.simple_xy_coordinates

def simple_circplot_coordinates(pair_table, x, y):
    return _RNA.simple_circplot_coordinates(pair_table, x, y)
simple_circplot_coordinates = _RNA.simple_circplot_coordinates

def PS_rna_plot_snoop_a(string, structure, ssfile, relative_access, seqs):
    return _RNA.PS_rna_plot_snoop_a(string, structure, ssfile, relative_access, seqs)
PS_rna_plot_snoop_a = _RNA.PS_rna_plot_snoop_a

def gmlRNA(string, structure, ssfile, option):
    return _RNA.gmlRNA(string, structure, ssfile, option)
gmlRNA = _RNA.gmlRNA

def ssv_rna_plot(string, structure, ssfile):
    return _RNA.ssv_rna_plot(string, structure, ssfile)
ssv_rna_plot = _RNA.ssv_rna_plot

def svg_rna_plot(string, structure, ssfile):
    return _RNA.svg_rna_plot(string, structure, ssfile)
svg_rna_plot = _RNA.svg_rna_plot

def xrna_plot(string, structure, ssfile):
    return _RNA.xrna_plot(string, structure, ssfile)
xrna_plot = _RNA.xrna_plot

def PS_rna_plot(string, structure, file):
    return _RNA.PS_rna_plot(string, structure, file)
PS_rna_plot = _RNA.PS_rna_plot

def PS_rna_plot_a(string, structure, file, pre, post):
    return _RNA.PS_rna_plot_a(string, structure, file, pre, post)
PS_rna_plot_a = _RNA.PS_rna_plot_a

def PS_rna_plot_a_gquad(string, structure, ssfile, pre, post):
    return _RNA.PS_rna_plot_a_gquad(string, structure, ssfile, pre, post)
PS_rna_plot_a_gquad = _RNA.PS_rna_plot_a_gquad

def PS_color_aln(structure, filename, seqs, names):
    return _RNA.PS_color_aln(structure, filename, seqs, names)
PS_color_aln = _RNA.PS_color_aln

def aliPS_color_aln(structure, filename, seqs, names):
    return _RNA.aliPS_color_aln(structure, filename, seqs, names)
aliPS_color_aln = _RNA.aliPS_color_aln

def PS_color_dot_plot(string, pi, filename):
    return _RNA.PS_color_dot_plot(string, pi, filename)
PS_color_dot_plot = _RNA.PS_color_dot_plot

def PS_color_dot_plot_turn(seq, pi, filename, winSize):
    return _RNA.PS_color_dot_plot_turn(seq, pi, filename, winSize)
PS_color_dot_plot_turn = _RNA.PS_color_dot_plot_turn

def PS_dot_plot_list(seq, filename, pl, mf, comment):
    return _RNA.PS_dot_plot_list(seq, filename, pl, mf, comment)
PS_dot_plot_list = _RNA.PS_dot_plot_list

def PS_dot_plot_turn(seq, pl, filename, winSize):
    return _RNA.PS_dot_plot_turn(seq, pl, filename, winSize)
PS_dot_plot_turn = _RNA.PS_dot_plot_turn

def PS_dot_plot(string, file):
    return _RNA.PS_dot_plot(string, file)
PS_dot_plot = _RNA.PS_dot_plot

_RNA.VRNA_CONSTRAINT_DB_PIPE_swigconstant(_RNA)
VRNA_CONSTRAINT_DB_PIPE = _RNA.VRNA_CONSTRAINT_DB_PIPE

_RNA.VRNA_CONSTRAINT_DB_DOT_swigconstant(_RNA)
VRNA_CONSTRAINT_DB_DOT = _RNA.VRNA_CONSTRAINT_DB_DOT

_RNA.VRNA_CONSTRAINT_DB_X_swigconstant(_RNA)
VRNA_CONSTRAINT_DB_X = _RNA.VRNA_CONSTRAINT_DB_X

_RNA.VRNA_CONSTRAINT_DB_ANG_BRACK_swigconstant(_RNA)
VRNA_CONSTRAINT_DB_ANG_BRACK = _RNA.VRNA_CONSTRAINT_DB_ANG_BRACK

_RNA.VRNA_CONSTRAINT_DB_RND_BRACK_swigconstant(_RNA)
VRNA_CONSTRAINT_DB_RND_BRACK = _RNA.VRNA_CONSTRAINT_DB_RND_BRACK

_RNA.VRNA_CONSTRAINT_DB_INTRAMOL_swigconstant(_RNA)
VRNA_CONSTRAINT_DB_INTRAMOL = _RNA.VRNA_CONSTRAINT_DB_INTRAMOL

_RNA.VRNA_CONSTRAINT_DB_INTERMOL_swigconstant(_RNA)
VRNA_CONSTRAINT_DB_INTERMOL = _RNA.VRNA_CONSTRAINT_DB_INTERMOL

_RNA.VRNA_CONSTRAINT_DB_GQUAD_swigconstant(_RNA)
VRNA_CONSTRAINT_DB_GQUAD = _RNA.VRNA_CONSTRAINT_DB_GQUAD

_RNA.VRNA_CONSTRAINT_DB_ENFORCE_BP_swigconstant(_RNA)
VRNA_CONSTRAINT_DB_ENFORCE_BP = _RNA.VRNA_CONSTRAINT_DB_ENFORCE_BP

_RNA.VRNA_CONSTRAINT_MULTILINE_swigconstant(_RNA)
VRNA_CONSTRAINT_MULTILINE = _RNA.VRNA_CONSTRAINT_MULTILINE

_RNA.VRNA_CONSTRAINT_NO_HEADER_swigconstant(_RNA)
VRNA_CONSTRAINT_NO_HEADER = _RNA.VRNA_CONSTRAINT_NO_HEADER

_RNA.VRNA_CONSTRAINT_ALL_swigconstant(_RNA)
VRNA_CONSTRAINT_ALL = _RNA.VRNA_CONSTRAINT_ALL

_RNA.VRNA_CONSTRAINT_DB_swigconstant(_RNA)
VRNA_CONSTRAINT_DB = _RNA.VRNA_CONSTRAINT_DB

_RNA.VRNA_CONSTRAINT_FILE_swigconstant(_RNA)
VRNA_CONSTRAINT_FILE = _RNA.VRNA_CONSTRAINT_FILE

_RNA.VRNA_CONSTRAINT_SOFT_MFE_swigconstant(_RNA)
VRNA_CONSTRAINT_SOFT_MFE = _RNA.VRNA_CONSTRAINT_SOFT_MFE

_RNA.VRNA_CONSTRAINT_SOFT_PF_swigconstant(_RNA)
VRNA_CONSTRAINT_SOFT_PF = _RNA.VRNA_CONSTRAINT_SOFT_PF

_RNA.VRNA_DECOMP_PAIR_HP_swigconstant(_RNA)
VRNA_DECOMP_PAIR_HP = _RNA.VRNA_DECOMP_PAIR_HP

_RNA.VRNA_DECOMP_PAIR_IL_swigconstant(_RNA)
VRNA_DECOMP_PAIR_IL = _RNA.VRNA_DECOMP_PAIR_IL

_RNA.VRNA_DECOMP_PAIR_ML_swigconstant(_RNA)
VRNA_DECOMP_PAIR_ML = _RNA.VRNA_DECOMP_PAIR_ML

_RNA.VRNA_DECOMP_ML_ML_ML_swigconstant(_RNA)
VRNA_DECOMP_ML_ML_ML = _RNA.VRNA_DECOMP_ML_ML_ML

_RNA.VRNA_DECOMP_ML_STEM_swigconstant(_RNA)
VRNA_DECOMP_ML_STEM = _RNA.VRNA_DECOMP_ML_STEM

_RNA.VRNA_DECOMP_ML_ML_swigconstant(_RNA)
VRNA_DECOMP_ML_ML = _RNA.VRNA_DECOMP_ML_ML

_RNA.VRNA_DECOMP_ML_UP_swigconstant(_RNA)
VRNA_DECOMP_ML_UP = _RNA.VRNA_DECOMP_ML_UP

_RNA.VRNA_DECOMP_ML_COAXIAL_swigconstant(_RNA)
VRNA_DECOMP_ML_COAXIAL = _RNA.VRNA_DECOMP_ML_COAXIAL

_RNA.VRNA_DECOMP_EXT_EXT_swigconstant(_RNA)
VRNA_DECOMP_EXT_EXT = _RNA.VRNA_DECOMP_EXT_EXT

_RNA.VRNA_DECOMP_EXT_UP_swigconstant(_RNA)
VRNA_DECOMP_EXT_UP = _RNA.VRNA_DECOMP_EXT_UP

_RNA.VRNA_DECOMP_EXT_STEM_swigconstant(_RNA)
VRNA_DECOMP_EXT_STEM = _RNA.VRNA_DECOMP_EXT_STEM

_RNA.VRNA_DECOMP_EXT_EXT_EXT_swigconstant(_RNA)
VRNA_DECOMP_EXT_EXT_EXT = _RNA.VRNA_DECOMP_EXT_EXT_EXT

_RNA.VRNA_DECOMP_EXT_STEM_EXT_swigconstant(_RNA)
VRNA_DECOMP_EXT_STEM_EXT = _RNA.VRNA_DECOMP_EXT_STEM_EXT

_RNA.VRNA_DECOMP_EXT_STEM_OUTSIDE_swigconstant(_RNA)
VRNA_DECOMP_EXT_STEM_OUTSIDE = _RNA.VRNA_DECOMP_EXT_STEM_OUTSIDE

_RNA.VRNA_DECOMP_EXT_EXT_STEM_swigconstant(_RNA)
VRNA_DECOMP_EXT_EXT_STEM = _RNA.VRNA_DECOMP_EXT_EXT_STEM

_RNA.VRNA_DECOMP_EXT_EXT_STEM1_swigconstant(_RNA)
VRNA_DECOMP_EXT_EXT_STEM1 = _RNA.VRNA_DECOMP_EXT_EXT_STEM1

_RNA.VRNA_DECOMP_ML_ML_STEM_swigconstant(_RNA)
VRNA_DECOMP_ML_ML_STEM = _RNA.VRNA_DECOMP_ML_ML_STEM

def energy_of_structure(string, structure, verbosity_level):
    return _RNA.energy_of_structure(string, structure, verbosity_level)
energy_of_structure = _RNA.energy_of_structure

def energy_of_circ_structure(string, structure, verbosity_level):
    return _RNA.energy_of_circ_structure(string, structure, verbosity_level)
energy_of_circ_structure = _RNA.energy_of_circ_structure

def energy_of_gquad_structure(string, structure, verbosity_level):
    return _RNA.energy_of_gquad_structure(string, structure, verbosity_level)
energy_of_gquad_structure = _RNA.energy_of_gquad_structure

def energy_of_structure_pt(string, ptable, s, s1, verbosity_level):
    return _RNA.energy_of_structure_pt(string, ptable, s, s1, verbosity_level)
energy_of_structure_pt = _RNA.energy_of_structure_pt

def energy_of_move(string, structure, m1, m2):
    return _RNA.energy_of_move(string, structure, m1, m2)
energy_of_move = _RNA.energy_of_move

def energy_of_move_pt(pt, s, s1, m1, m2):
    return _RNA.energy_of_move_pt(pt, s, s1, m1, m2)
energy_of_move_pt = _RNA.energy_of_move_pt

def loop_energy(ptable, s, s1, i):
    return _RNA.loop_energy(ptable, s, s1, i)
loop_energy = _RNA.loop_energy

def energy_of_struct(string, structure):
    return _RNA.energy_of_struct(string, structure)
energy_of_struct = _RNA.energy_of_struct

def energy_of_struct_pt(string, ptable, s, s1):
    return _RNA.energy_of_struct_pt(string, ptable, s, s1)
energy_of_struct_pt = _RNA.energy_of_struct_pt

def energy_of_circ_struct(string, structure):
    return _RNA.energy_of_circ_struct(string, structure)
energy_of_circ_struct = _RNA.energy_of_circ_struct

def fold(string, constraints=None):
    return _RNA.fold(string, constraints)
fold = _RNA.fold

def circfold(sequence, structure):
    return _RNA.circfold(sequence, structure)
circfold = _RNA.circfold

def free_arrays():
    return _RNA.free_arrays()
free_arrays = _RNA.free_arrays

def update_fold_params():
    return _RNA.update_fold_params()
update_fold_params = _RNA.update_fold_params

def cofold(string, constraints=None):
    return _RNA.cofold(string, constraints)
cofold = _RNA.cofold

def free_co_arrays():
    return _RNA.free_co_arrays()
free_co_arrays = _RNA.free_co_arrays

def update_cofold_params():
    return _RNA.update_cofold_params()
update_cofold_params = _RNA.update_cofold_params

def initialize_cofold(length):
    return _RNA.initialize_cofold(length)
initialize_cofold = _RNA.initialize_cofold

def alifold(strings, constraints=None):
    return _RNA.alifold(strings, constraints)
alifold = _RNA.alifold

def circalifold(strings, structure):
    return _RNA.circalifold(strings, structure)
circalifold = _RNA.circalifold

def free_alifold_arrays():
    return _RNA.free_alifold_arrays()
free_alifold_arrays = _RNA.free_alifold_arrays

def pf_fold(string, constraints=None):
    return _RNA.pf_fold(string, constraints)
pf_fold = _RNA.pf_fold

def pbacktrack(sequence):
    return _RNA.pbacktrack(sequence)
pbacktrack = _RNA.pbacktrack

def pf_float_precision():
    return _RNA.pf_float_precision()
pf_float_precision = _RNA.pf_float_precision

def pf_circ_fold(sequence, structure):
    return _RNA.pf_circ_fold(sequence, structure)
pf_circ_fold = _RNA.pf_circ_fold

def pbacktrack5(sequence, length):
    return _RNA.pbacktrack5(sequence, length)
pbacktrack5 = _RNA.pbacktrack5

def pbacktrack_circ(sequence):
    return _RNA.pbacktrack_circ(sequence)
pbacktrack_circ = _RNA.pbacktrack_circ

def free_pf_arrays():
    return _RNA.free_pf_arrays()
free_pf_arrays = _RNA.free_pf_arrays

def update_pf_params(length):
    return _RNA.update_pf_params(length)
update_pf_params = _RNA.update_pf_params

def mean_bp_distance(length):
    return _RNA.mean_bp_distance(length)
mean_bp_distance = _RNA.mean_bp_distance

def init_pf_fold(length):
    return _RNA.init_pf_fold(length)
init_pf_fold = _RNA.init_pf_fold

def centroid(length, dist):
    return _RNA.centroid(length, dist)
centroid = _RNA.centroid

def co_pf_fold(string, constraints=None):
    return _RNA.co_pf_fold(string, constraints)
co_pf_fold = _RNA.co_pf_fold

def get_concentrations(FcAB, FcAA, FcBB, FEA, FEB, A0, BO):
    return _RNA.get_concentrations(FcAB, FcAA, FcBB, FEA, FEB, A0, BO)
get_concentrations = _RNA.get_concentrations

def free_co_pf_arrays():
    return _RNA.free_co_pf_arrays()
free_co_pf_arrays = _RNA.free_co_pf_arrays

def update_co_pf_params(length):
    return _RNA.update_co_pf_params(length)
update_co_pf_params = _RNA.update_co_pf_params

def get_pr(i, j):
    return _RNA.get_pr(i, j)
get_pr = _RNA.get_pr
class SOLUTION(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SOLUTION, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SOLUTION, name)
    __repr__ = _swig_repr
    __swig_setmethods__["energy"] = _RNA.SOLUTION_energy_set
    __swig_getmethods__["energy"] = _RNA.SOLUTION_energy_get
    if _newclass:
        energy = _swig_property(_RNA.SOLUTION_energy_get, _RNA.SOLUTION_energy_set)
    __swig_setmethods__["structure"] = _RNA.SOLUTION_structure_set
    __swig_getmethods__["structure"] = _RNA.SOLUTION_structure_get
    if _newclass:
        structure = _swig_property(_RNA.SOLUTION_structure_get, _RNA.SOLUTION_structure_set)

    def get(self, i):
        return _RNA.SOLUTION_get(self, i)

    def size(self):
        return _RNA.SOLUTION_size(self)
    __swig_destroy__ = _RNA.delete_SOLUTION
    __del__ = lambda self: None

    def __init__(self):
        this = _RNA.new_SOLUTION()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
SOLUTION_swigregister = _RNA.SOLUTION_swigregister
SOLUTION_swigregister(SOLUTION)


def subopt(seq, constraint, delta, fp=None):
    return _RNA.subopt(seq, constraint, delta, fp)
subopt = _RNA.subopt

_RNA.MAXDOS_swigconstant(_RNA)
MAXDOS = _RNA.MAXDOS

def inverse_fold(start, target):
    return _RNA.inverse_fold(start, target)
inverse_fold = _RNA.inverse_fold

def inverse_pf_fold(start, target):
    return _RNA.inverse_pf_fold(start, target)
inverse_pf_fold = _RNA.inverse_pf_fold

def b2HIT(structure):
    return _RNA.b2HIT(structure)
b2HIT = _RNA.b2HIT

def b2C(structure):
    return _RNA.b2C(structure)
b2C = _RNA.b2C

def b2Shapiro(structure):
    return _RNA.b2Shapiro(structure)
b2Shapiro = _RNA.b2Shapiro

def add_root(arg1):
    return _RNA.add_root(arg1)
add_root = _RNA.add_root

def expand_Shapiro(coarse):
    return _RNA.expand_Shapiro(coarse)
expand_Shapiro = _RNA.expand_Shapiro

def expand_Full(structure):
    return _RNA.expand_Full(structure)
expand_Full = _RNA.expand_Full

def unexpand_Full(ffull):
    return _RNA.unexpand_Full(ffull)
unexpand_Full = _RNA.unexpand_Full

def unweight(wcoarse):
    return _RNA.unweight(wcoarse)
unweight = _RNA.unweight

def unexpand_aligned_F(align):
    return _RNA.unexpand_aligned_F(align)
unexpand_aligned_F = _RNA.unexpand_aligned_F

def parse_structure(structure):
    return _RNA.parse_structure(structure)
parse_structure = _RNA.parse_structure

def make_tree(struc):
    return _RNA.make_tree(struc)
make_tree = _RNA.make_tree

def tree_edit_distance(T1, T2):
    return _RNA.tree_edit_distance(T1, T2)
tree_edit_distance = _RNA.tree_edit_distance

def print_tree(t):
    return _RNA.print_tree(t)
print_tree = _RNA.print_tree

def free_tree(t):
    return _RNA.free_tree(t)
free_tree = _RNA.free_tree

def Make_swString(string):
    return _RNA.Make_swString(string)
Make_swString = _RNA.Make_swString

def string_edit_distance(T1, T2):
    return _RNA.string_edit_distance(T1, T2)
string_edit_distance = _RNA.string_edit_distance

def profile_edit_distance(T1, T2):
    return _RNA.profile_edit_distance(T1, T2)
profile_edit_distance = _RNA.profile_edit_distance

def Make_bp_profile_bppm(bppm, length):
    return _RNA.Make_bp_profile_bppm(bppm, length)
Make_bp_profile_bppm = _RNA.Make_bp_profile_bppm

def print_bppm(T):
    return _RNA.print_bppm(T)
print_bppm = _RNA.print_bppm

def free_profile(T):
    return _RNA.free_profile(T)
free_profile = _RNA.free_profile

def Make_bp_profile(length):
    return _RNA.Make_bp_profile(length)
Make_bp_profile = _RNA.Make_bp_profile

def deref_any(ptr, index):
    return _RNA.deref_any(ptr, index)
deref_any = _RNA.deref_any

def get_aligned_line(arg1):
    return _RNA.get_aligned_line(arg1)
get_aligned_line = _RNA.get_aligned_line

def duplexfold(s1, s2):
    return _RNA.duplexfold(s1, s2)
duplexfold = _RNA.duplexfold

def duplex_subopt(s1, s2, delta, w):
    return _RNA.duplex_subopt(s1, s2, delta, w)
duplex_subopt = _RNA.duplex_subopt

def aliduplexfold(s1, s2):
    return _RNA.aliduplexfold(s1, s2)
aliduplexfold = _RNA.aliduplexfold

def aliduplex_subopt(s1, s2, delta, w):
    return _RNA.aliduplex_subopt(s1, s2, delta, w)
aliduplex_subopt = _RNA.aliduplex_subopt

def aliLfold(strings, structure, maxdist):
    return _RNA.aliLfold(strings, structure, maxdist)
aliLfold = _RNA.aliLfold

def Lfold(string, structure, maxdist):
    return _RNA.Lfold(string, structure, maxdist)
Lfold = _RNA.Lfold

def Lfoldz(string, structure, maxdist, zsc, min_z):
    return _RNA.Lfoldz(string, structure, maxdist, zsc, min_z)
Lfoldz = _RNA.Lfoldz
class path(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, path, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, path, name)
    __repr__ = _swig_repr
    __swig_setmethods__["en"] = _RNA.path_en_set
    __swig_getmethods__["en"] = _RNA.path_en_get
    if _newclass:
        en = _swig_property(_RNA.path_en_get, _RNA.path_en_set)
    __swig_setmethods__["s"] = _RNA.path_s_set
    __swig_getmethods__["s"] = _RNA.path_s_get
    if _newclass:
        s = _swig_property(_RNA.path_s_get, _RNA.path_s_set)

    def get(self, i):
        return _RNA.path_get(self, i)

    def size(self):
        return _RNA.path_size(self)
    __swig_destroy__ = _RNA.delete_path
    __del__ = lambda self: None

    def __init__(self):
        this = _RNA.new_path()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
path_swigregister = _RNA.path_swigregister
path_swigregister(path)


def find_saddle(seq, struc1, struc2, max):
    return _RNA.find_saddle(seq, struc1, struc2, max)
find_saddle = _RNA.find_saddle

def free_path(path):
    return _RNA.free_path(path)
free_path = _RNA.free_path

def get_path(seq, s1, s2, maxkeep):
    return _RNA.get_path(seq, s1, s2, maxkeep)
get_path = _RNA.get_path
class struct_en(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, struct_en, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, struct_en, name)
    __repr__ = _swig_repr
    __swig_setmethods__["energy"] = _RNA.struct_en_energy_set
    __swig_getmethods__["energy"] = _RNA.struct_en_energy_get
    if _newclass:
        energy = _swig_property(_RNA.struct_en_energy_get, _RNA.struct_en_energy_set)
    __swig_setmethods__["structure"] = _RNA.struct_en_structure_set
    __swig_getmethods__["structure"] = _RNA.struct_en_structure_get
    if _newclass:
        structure = _swig_property(_RNA.struct_en_structure_get, _RNA.struct_en_structure_set)

    def __init__(self):
        this = _RNA.new_struct_en()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _RNA.delete_struct_en
    __del__ = lambda self: None
struct_en_swigregister = _RNA.struct_en_swigregister
struct_en_swigregister(struct_en)


def print_stren(out, str):
    return _RNA.print_stren(out, str)
print_stren = _RNA.print_stren

def print_str(out, str):
    return _RNA.print_str(out, str)
print_str = _RNA.print_str

def copy_arr(dest, src):
    return _RNA.copy_arr(dest, src)
copy_arr = _RNA.copy_arr

def allocopy(src):
    return _RNA.allocopy(src)
allocopy = _RNA.allocopy

_RNA.GRADIENT_swigconstant(_RNA)
GRADIENT = _RNA.GRADIENT

_RNA.FIRST_swigconstant(_RNA)
FIRST = _RNA.FIRST

_RNA.ADAPTIVE_swigconstant(_RNA)
ADAPTIVE = _RNA.ADAPTIVE

def move_gradient(seq, ptable, s, s1, verbosity_level, shifts, noLP):
    return _RNA.move_gradient(seq, ptable, s, s1, verbosity_level, shifts, noLP)
move_gradient = _RNA.move_gradient

def move_first(seq, ptable, s, s1, verbosity_level, shifts, noLP):
    return _RNA.move_first(seq, ptable, s, s1, verbosity_level, shifts, noLP)
move_first = _RNA.move_first

def move_adaptive(seq, ptable, s, s1, verbosity_level):
    return _RNA.move_adaptive(seq, ptable, s, s1, verbosity_level)
move_adaptive = _RNA.move_adaptive

def move_standard(seq, struc, type, verbosity_level, shifts, noLP):
    return _RNA.move_standard(seq, struc, type, verbosity_level, shifts, noLP)
move_standard = _RNA.move_standard

def browse_neighs_pt(seq, ptable, s, s1, verbosity_level, shifts, noLP, funct):
    return _RNA.browse_neighs_pt(seq, ptable, s, s1, verbosity_level, shifts, noLP, funct)
browse_neighs_pt = _RNA.browse_neighs_pt

def browse_neighs(seq, struc, verbosity_level, shifts, noLP, funct):
    return _RNA.browse_neighs(seq, struc, verbosity_level, shifts, noLP, funct)
browse_neighs = _RNA.browse_neighs
# This file is compatible with both classic and new-style classes.


